@using Misskey.Domain
@inject IJSRuntime JS

<div id="note-dialog" class="modal fade" tabindex="-1" aria-labelledby="tell-me-how-you-feel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="tell-me-how-you-feel" class="modal-title">あなたのお気持ちを聞かせてください</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>  <!-- .modal-header -->
            <div class="modal-body">
                <textarea class="form-control" cols="32" rows="3" @bind="model.Text">
        </textarea>
            </div>  <!-- .modal-body -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">やめとく</button>
                <button type="button" class="btn btn-primary" @onclick="Update">投稿</button>
            </div>  <!-- .modal-footer -->
        </div>  <!-- .modal-content -->
    </div>  <!-- .modal-dialog -->
</div>  <!-- .modal.fade -->
@code {
    #nullable enable

    /// <summary>
    ///
    /// </summary>
    private IJSObjectReference? modal;

    /// <summary>
    /// 現在のビューの影、いわゆるモデル
    /// </summary>
    private Note model = new();

    /// <summary>
    /// 
    /// </summary>
    /// <param name="modalId"></param>
    /// <returns></returns>
    public async Task CloseModal(string modalId) {
        if ( modal is not null ) {
            await modal.InvokeVoidAsync( "closeModal", modalId );
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if ( firstRender ) {
            modal = await JS.InvokeAsync<IJSObjectReference>( "import", "./js/modal.js" );
        }
    }

    /// <summary>
    /// 新しいモデルを設定します。
    /// </summary>
    /// <param name="aNote"></param>
    /// <returns></returns>
    private async Task AssignNote(Note aNote) {
        await Task.Run( () => model = aNote );
    }

    /// <summary>
    /// 投稿します。
    /// </summary>
    /// <returns></returns>
    private async Task Update() {
        // TODO: ノートを投稿する。
        await Task.Run( () => { } );
        // モーダルを閉じる。
        await CloseModal( "note-dialog" );
        /* NOTE: モーダルを閉じる際、閉じる前に返ってくる模様。 */
        // 送信に成功した場合、新しいノートオブジェクトを設定する。
        await AssignNote( new Note() );
        /* NOTE: 今のところ、まだみすきーインスタンスにノートを放流しないため、確定で新しいノートを設定する。 */
    }
}
